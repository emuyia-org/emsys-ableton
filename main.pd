#N canvas 1440 928 1920 976 12;
#X obj 61 185 midiout 3;
#X msg 60 149 240 0 32 107 127 66 2 2 64 106 33 247;
#X obj 60 113 loadbang;
#X text 129 111 required for init ml3_text;
#X obj 175 296 midirealtimein;
#X obj 291 547 counter 0 0 15;
#X msg 350 149 \; pd dsp 1;
#X obj 350 109 loadbang;
#X obj 446 101 loadbang;
#X obj 452 220 ml3/text;
#X obj 449 156 del 50;
#X obj 447 124 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X msg 530 190 emsys;
#X msg 478 187 alpha;
#X obj 601 199 ml3/clr;
#X obj 597 103 loadbang;
#X msg 605 163 clear;
#X obj 598 134 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 570 298 ctlin 106 33;
#X obj 469 298 ctlin 107 33;
#X obj 570 328 sel 127;
#X obj 470 331 sel 127;
#X obj 572 360 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 469 363 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X text 577 269 stop;
#X text 66 34 caution: if ml3 gets unplugged after this occurs \, text input wont work thereafter until this is triggered again, f 31;
#X obj 571 393 s t.stop;
#X obj 273 610 s t.count;
#X obj 431 589 sel 13;
#X obj 429 624 s t.load;
#X obj 502 583 sel 1;
#X obj 504 620 s t.downbeat;
#X obj 361 588 sel 0 1;
#X obj 347 623 s t.beat1;
#X obj 366 652 s t.beat2;
#X obj 442 448 r t.length;
#X floatatom 442 477 5 6 64 0 - - - 0;
#X obj 442 514 - 1;
#X obj 139 372 sel 248;
#X obj 140 411 counter 0 0 5;
#X obj 140 441 sel 0;
#X obj 140 561 sel 0;
#X obj 140 471 counter 0 0 1;
#X obj 140 501 sel 0;
#X obj 140 531 counter 0 0 1;
#X obj 482 511 - 3;
#X obj 80 597 s t.4n;
#X obj 286 489 r t.4n;
#X obj 139 334 gate 0;
#X obj 76 477 s t.16n;
#X obj 76 537 s t.8n;
#X obj 467 394 s t.cont;
#X text 474 269 cont;
#X obj 669 362 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 672 300 ctlin 105 33;
#X obj 671 333 sel 127;
#X obj 665 389 s t.prime;
#X obj 287 328 r t.prime;
#X obj 287 360 t;
#X msg 93 297 1;
#X msg 131 299 0;
#X obj 95 260 r t.cont;
#X obj 169 259 r t.stop;
#X text 670 271 prime (midi: 250);
#X obj 693 203 ml3/clr;
#X obj 736 177 loadmess red;
#X obj 724 153 loadmess 0;
#X obj 751 118 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 693 151 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 623 553 r t.8n;
#X obj 622 594 counter 0 0 31;
#X obj 750 534 r t.16n;
#X obj 751 572 counter 0 0 63;
#X obj 679 505 * 2;
#X obj 829 485 * 4;
#X obj 682 547 - 1;
#X obj 828 522 - 1;
#X obj 679 629 sel 1;
#X obj 679 665 s t.interrupt;
#X obj 593 661 s t.count8;
#X obj 756 636 s t.count16;
#X msg 240 742 250;
#X msg 165 743 252;
#X msg 89 743 251;
#X msg 91 782 \$1;
#X obj 606 522 r t.prime;
#X obj 752 502 r t.prime;
#X obj 335 517 r t.prime;
#X obj 237 706 r t.prime;
#X obj 164 705 r t.stop;
#X obj 86 705 r t.cont;
#X obj 88 814 midiout 2;
#X obj 232 328 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X floatatom 274 579 5 0 0 0 - - - 0;
#X floatatom 607 629 5 0 0 0 - - - 0;
#X floatatom 759 604 5 0 0 0 - - - 0;
#X obj 852 174 dac~;
#X obj 848 111 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 850 143 clickz 300;
#X obj 848 86 r t.4n;
#X floatatom 859 271 5 30 300 2 tempo - - 0;
#X obj 885 310 loadbang;
#X msg 885 350 1;
#X obj 851 393 ctlout;
#X msg 909 350 1;
#X obj 859 310 scale 30 300 0 127;
#X obj 859 231 loadmess 120;
#X obj 690 104 r t.8n;
#X obj 1659 794 route md mnm rep len tin bpm bpmr poly;
#X floatatom 1655 890 5 0 0 0 - - - 0;
#X floatatom 1706 890 5 0 0 0 - - - 0;
#X floatatom 1752 889 5 0 0 0 - - - 0;
#X floatatom 1796 846 5 0 0 0 - - - 0;
#X floatatom 1843 848 5 0 0 0 - - - 0;
#X floatatom 1558 888 5 0 0 0 - - - 0;
#X floatatom 1604 889 5 0 0 0 - - - 0;
#X obj 1578 841 bank2pgm;
#X obj 1653 843 bank2pgm;
#X floatatom 1891 848 5 0 0 0 - - - 0;
#X obj 1662 742 list trim;
#X obj 1691 698 list split 2;
#X obj 1754 746 list;
#X obj 1688 654 text get set;
#X floatatom 1689 618 5 0 0 0 - - - 0;
#X obj 1595 778 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 1649 557 counter, f 11;
#X obj 1754 581 del 50;
#X obj 1742 497 t;
#X obj 1740 466 bng 20 250 50 0 empty empty reset 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 1998 333 r s.reset;
#X obj 1881 492 text size set;
#X obj 1905 615 i;
#X obj 1848 541 ==;
#X obj 1846 571 sel 1;
#X obj 1827 281 t;
#X msg 1816 317 stop;
#X obj 1867 315 loadmess 0;
#X obj 1868 344 s s.hold;
#X obj 1725 364 onebang;
#X obj 1726 298 r t.load;
#X obj 1647 321 r s.hold;
#X obj 1646 352 == 0;
#X obj 1660 407 gate 1;
#X obj 1668 437 t;
#X obj 1677 495 bng 20 250 50 0 empty empty cont 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 1544 618 s s.do_pgm_out;
#X text 4594 671 comment;
#X text 1982 2301 comment;
#X text 1696 200 only let set continue after the last rep of the current segment, f 22;
#X text 1559 316 if on hold \, dont let the set continue to the next segment, f 11;
#X text 1917 516 once counter reaches max (size of set text) \, force counter to loop at current segment, f 17;
#X text 1791 650 this splits up the segment data into pairs so they can be routed, f 15;
#X obj 1168 676 sel 0;
#X obj 1384 655 + 1;
#X obj 1381 695 s s.current_seg_id;
#X obj 1245 694 text get set;
#X obj 1378 726 s s.current_seg_data;
#X obj 1245 728 s s.next_seg_data;
#X obj 1168 709 s s.start;
#X obj 1277 309 r t.stop;
#X msg 1287 352 1;
#X msg 1336 355 0;
#X obj 1346 311 r t.4n;
#X obj 1307 387 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 1308 414 + 1;
#X obj 1315 469 gate 2;
#X obj 1336 512 b;
#X msg 1225 554 0;
#X obj 1182 598 s s.hold;
#X msg 1431 347 clear;
#X obj 1409 385 pipe 250;
#X obj 1412 416 - 1;
#X obj 1252 599 s tin.toggle;
#X obj 1332 550 del 100;
#X obj 1401 285 r s.seek_seg;
#X text 1484 502 send pgm out on the load of the last rep of the current segment. or on reset \, or 100ms after manually seeking to a seg, f 22;
#X text 1372 217 lets user seek to a specific seg \, with a 250 pipe to buff out spamming value changes, f 23;
#X text 1102 409 if we seek a seg \, & we're live \, turn off hold & tin \, and queue up seg change at counter. if we're stopped \, don't worry about hold & tin as their states are inconsequential \, and set counter output immediately, f 28;
#X text 1023 647 sending out data about the current & next seg \, and if the set is at the start, f 19;
#X obj 1559 930 f;
#X obj 1604 935 f;
#X obj 1656 963 f;
#X obj 1700 965 f;
#X obj 1755 960 f;
#X obj 1808 959 f;
#X obj 1854 958 f;
#X obj 1900 962 f;
#X text 879 112 test click;
#X obj 1447 849 r s.do_pgm_out;
#X obj 1528 893 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 1958 882 r s.first_rep;
#X obj 1796 882 sel 0;
#X obj 1848 882 sel 0;
#X obj 1896 882 change;
#X obj 1415 975 s s.md_pgm_change;
#X obj 1496 1013 s s.mnm_pgm_change;
#X obj 1416 1038 pgmout 15;
#X obj 1494 1079 pgmout 14;
#X obj 1417 1008 change;
#X obj 1494 1046 change;
#X obj 1643 998 s s.seg_reps;
#X obj 1664 1030 s s.loop_len;
#X obj 1765 1032 s s.seg_bpm_target;
#X obj 1908 1031 s s.seg_poly;
#X obj 1741 1000 s s.seg_tin;
#X obj 1840 1002 s s.seg_bpm_rtime;
#X obj 886 780 loadmess 0;
#X obj 965 779 r s.hold;
#X obj 887 820 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 886 854 t b f f;
#X obj 860 893 == 0;
#X obj 886 942 gate 0;
#X obj 1065 987 gate 1;
#X obj 959 892 == 0;
#X obj 955 924 sel 0;
#X obj 1114 908 r t.beat1;
#X obj 1115 942 onebang;
#X obj 1196 904 r s.start;
#X obj 1400 317 t f b;
#X obj 1273 904 r t.downbeat;
#X obj 1104 1091 counter 0 0 3;
#X obj 1160 1165 s s.current_rep;
#X obj 1227 1056 r s.seg_reps;
#X obj 1227 1088 - 1;
#X obj 1128 1009 r s.seek_rep;
#X msg 1126 1037 set \$1;
#X obj 1109 1161 sel 0;
#X obj 1108 1196 s s.first_rep;
#X text 1397 773 reset rep counter each time new segment data is loaded, f 27;
#X text 1145 849 only let rep counter advance after a downbeat \, or after the set has just been started, f 29;
#X floatatom 838 846 5 0 0 0 - - - 0;
#X obj 1739 261 r s.last_rep;
#X text 737 861 if hold is on \, and we're on the last rep \, don't advance the rep counter further., f 16;
#X text 998 856 when hold is turned off \, open gate up again to allow rep advancement, f 14;
#X text 1125 1119 rep (repetition) counter, f 17;
#X obj 868 1007 r t.beat1;
#X obj 870 1046 del 50;
#X obj 872 1080 f;
#X obj 870 1151 sel 3;
#X obj 911 1080 r s.seg_reps;
#X obj 898 1118 - 1;
#X obj 867 1191 s s.last_rep;
#X text 712 1042 send out that it's the last rep \, but wait a little before spreading the word incase it's acted on too early, f 21;
#X msg 2005 931 240 0 32 60 3 0 113 32 \$1 247;
#X obj 2005 967 midiout 2;
#X text 2088 957 mnm poly sysex;
#X obj 987 1174 < 1;
#X obj 986 1206 sel 1;
#X msg 985 1238 set -1;
#X obj 994 1275 change;
#X obj 994 1308 sel 0;
#X obj 993 1343 onebang;
#X obj 904 1274 r s.reset;
#X msg 905 1302 stop;
#X obj 1811 734 sel 2;
#X obj 1809 762 s s.end;
#X obj 1048 1307 r s.end;
#X msg 992 1376 end reached;
#X obj 991 1404 print s;
#X obj 905 1404 s t.stop;
#X text 796 1391 optional: stop transport at end of set automatically, f 14;
#X text 775 1267 reset onebang status (and thereby 'end of set' status) when set is reset, f 17;
#X text 1042 1239 hack: if last segment has only 1 rep \, make sure we still detect the end of the set by setting [change] to -1, f 29;
#X obj 1497 1160 r s.seg_bpm_target;
#X obj 1495 1196 change;
#X obj 1515 1365 pack f f f;
#X msg 1516 1400 \$3 \, \$1 \$2;
#X obj 1511 1448 line 120 50;
#X obj 1513 1484 s t.tempo;
#X obj 960 232 r t.tempo;
#X obj 1686 1368 r s.reset;
#X obj 1617 1370 r t.stop;
#X msg 1651 1408 stop;
#X obj 1585 1230 r s.seg_bpm_rtime;
#X obj 1582 1264 * 1000;
#X text 1640 1055 segment data key: - md & mnm: pgms to load on mnm & md synths - rep: how many times to repeat the segment - len: the loop length of the segment - tin: whether to jumpstart the transport at the end of the segment \, either to interrupt a md/mnm pattern with an misaligned scale length \, or to fix clock desync issues - bpm: target bpm for current seg to ramp up to - bpmr: ramp time of the bpm target (s) - poly: whether to activate mnm poly mode, f 81;
#X obj 1707 1266 f;
#X obj 1726 1230 r t.tempo;
#X obj 1493 1229 t f b;
#X text 1744 1255 tempo ramping... should work. when ramp data comes in \, it captures the current tempo into [f] \, which gets used as the starting position for [line], f 28;
#X obj 1413 1234 r t.beat1;
#X obj 1446 1277 onebang;
#X obj 1505 1326 f;
#X text 1353 1270 wait until beat1 to begin ramp, f 11;
#X obj 2237 277 r t.interrupt;
#X obj 2238 319 onebang;
#X obj 2341 279 r t.load;
#X msg 2236 384 252;
#X msg 2192 384 250;
#X obj 2223 434 f;
#X obj 2182 342 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 2156 304 r t.beat1;
#X obj 2221 483 gate 0;
#X obj 2102 435 r tin.toggle;
#X obj 2184 537 gate 1;
#X obj 2343 480 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 2329 445 0;
#X msg 2369 435 1;
#X obj 2378 383 r s.first_rep;
#X obj 2321 343 r s.md_pgm_change;
#X obj 2324 382 change;
#X obj 2328 417 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 2173 587 midiout 2;
#X obj 2267 574 sel 250;
#X msg 2341 671 0;
#X obj 2403 810 s tin.toggle;
#X obj 2565 470 r s.last_rep;
#X obj 2463 498 r ctl.tin;
#X obj 2468 531 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X msg 2471 563 stop;
#X obj 2428 607 onebang;
#X obj 2407 563 sel 250;
#X obj 2549 567 onebang;
#X obj 2600 500 r s.seg_tin;
#X obj 2595 532 sel 1;
#X obj 2350 605 r t.stop;
#X obj 2650 676 gate 1;
#X obj 2599 639 == 0;
#X obj 2597 603 r s.hold;
#X msg 2213 675 0;
#X obj 2211 628 r s.reset;
#X obj 2215 704 s s.hold;
#X msg 2683 640 1;
#X obj 2557 678 r s.seg_tin;
#X obj 2594 723 gate 0;
#X obj 2499 729 r ctl.tin;
#X text 2659 704 activate tin for the last rep \, ONLY if hold is off & we receive tin=1 from segment data [r s.seg_tin]. or just activate tin from ctl manually., f 26;
#X text 2393 626 once 250 is sent \, turn off tin again \, only if tin=1 \, it's the last rep \, and we haven't touched the manual tin ctl, f 22;
#X text 2478 303 don't let transport messages through to md/mnm if pgm change is occurring. turn back on at the start of next segment. this is because of a bug that overwhelms MCL if you do transport & pgm at the same time., f 31;
#X text 2212 206 tin: send stop signal to md/mnm just before next rep to fix desync or interrupt mismatching scale length patterns, f 32;
#X obj 245 878 loadbang;
#X obj 185 1174 text define boot;
#X obj 288 940 del 50;
#X msg 288 977 0;
#X obj 280 1009 text get boot;
#X obj 314 1064 t b s;
#X obj 337 1108 text set boot;
#X obj 315 1142 del 50;
#X obj 334 1179 del 50;
#X obj 313 1217 s s.reset;
#X obj 430 1062 r ctl.reload_mset;
#X obj 461 1102 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 405 1160 symbol;
#X msg 404 1195 read \$1;
#X obj 405 1236 text define set;
#X text 387 970 load mset file from boot.txt \, and load .mset file into [text define set], f 24;
#X msg 206 1136 read boot.set;
#X msg 164 1104 write boot.set;
#X text 1058 73 TODO: - add debug messaging - add ml3 essential ctl - add ml3 essential UI feedback - thoroughly test;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 0 48 1;
#X connect 4 0 92 0;
#X connect 5 0 28 0;
#X connect 5 0 32 0;
#X connect 5 0 93 0;
#X connect 5 2 30 0;
#X connect 7 0 6 0;
#X connect 8 0 11 0;
#X connect 10 0 9 0;
#X connect 11 0 12 0;
#X connect 11 0 13 0;
#X connect 11 0 10 0;
#X connect 12 0 9 2;
#X connect 13 0 9 1;
#X connect 15 0 17 0;
#X connect 16 0 14 0;
#X connect 17 0 16 0;
#X connect 18 0 20 0;
#X connect 19 0 21 0;
#X connect 20 0 22 0;
#X connect 21 0 23 0;
#X connect 22 0 26 0;
#X connect 23 0 51 0;
#X connect 28 0 29 0;
#X connect 30 0 31 0;
#X connect 32 0 33 0;
#X connect 32 1 34 0;
#X connect 35 0 36 0;
#X connect 36 0 37 0;
#X connect 36 0 45 0;
#X connect 36 0 73 0;
#X connect 36 0 74 0;
#X connect 37 0 5 4;
#X connect 38 0 39 0;
#X connect 39 0 40 0;
#X connect 40 0 42 0;
#X connect 40 0 49 0;
#X connect 41 0 46 0;
#X connect 42 0 43 0;
#X connect 43 0 44 0;
#X connect 43 0 50 0;
#X connect 44 0 41 0;
#X connect 45 0 28 1;
#X connect 47 0 5 0;
#X connect 48 0 38 0;
#X connect 53 0 56 0;
#X connect 54 0 55 0;
#X connect 55 0 53 0;
#X connect 57 0 58 0;
#X connect 58 0 59 0;
#X connect 58 1 39 2;
#X connect 58 1 42 2;
#X connect 58 1 44 2;
#X connect 59 0 48 0;
#X connect 60 0 48 0;
#X connect 61 0 59 0;
#X connect 62 0 60 0;
#X connect 65 0 64 2;
#X connect 66 0 64 1;
#X connect 67 0 65 0;
#X connect 67 0 66 0;
#X connect 68 0 64 0;
#X connect 69 0 70 0;
#X connect 70 0 94 0;
#X connect 70 2 77 0;
#X connect 71 0 72 0;
#X connect 72 0 95 0;
#X connect 73 0 75 0;
#X connect 74 0 76 0;
#X connect 75 0 70 4;
#X connect 76 0 72 4;
#X connect 77 0 78 0;
#X connect 81 0 84 0;
#X connect 82 0 84 0;
#X connect 83 0 84 0;
#X connect 84 0 91 0;
#X connect 85 0 70 2;
#X connect 86 0 72 2;
#X connect 87 0 5 2;
#X connect 88 0 81 0;
#X connect 89 0 82 0;
#X connect 90 0 83 0;
#X connect 93 0 27 0;
#X connect 94 0 79 0;
#X connect 95 0 80 0;
#X connect 97 0 98 0;
#X connect 98 0 96 0;
#X connect 98 0 96 1;
#X connect 99 0 97 0;
#X connect 100 0 105 0;
#X connect 101 0 102 0;
#X connect 101 0 104 0;
#X connect 102 0 103 1;
#X connect 104 0 103 2;
#X connect 105 0 103 0;
#X connect 106 0 100 0;
#X connect 107 0 68 0;
#X connect 108 0 116 0;
#X connect 108 1 117 0;
#X connect 108 2 109 0;
#X connect 108 3 110 0;
#X connect 108 4 111 0;
#X connect 108 5 112 0;
#X connect 108 6 113 0;
#X connect 108 7 118 0;
#X connect 109 0 181 1;
#X connect 110 0 182 1;
#X connect 111 0 183 1;
#X connect 112 0 191 0;
#X connect 114 0 179 1;
#X connect 115 0 180 1;
#X connect 116 0 114 0;
#X connect 117 0 115 0;
#X connect 118 0 193 0;
#X connect 119 0 108 0;
#X connect 119 0 124 0;
#X connect 120 0 119 0;
#X connect 120 1 121 0;
#X connect 121 0 120 0;
#X connect 122 0 120 0;
#X connect 122 0 156 0;
#X connect 122 1 254 0;
#X connect 123 0 122 0;
#X connect 123 0 152 0;
#X connect 123 0 153 0;
#X connect 124 0 220 2;
#X connect 125 0 123 0;
#X connect 125 0 132 0;
#X connect 126 0 123 0;
#X connect 126 0 145 0;
#X connect 127 0 126 0;
#X connect 127 1 125 3;
#X connect 128 0 127 0;
#X connect 129 0 130 0;
#X connect 129 0 128 0;
#X connect 129 0 134 0;
#X connect 130 0 131 1;
#X connect 130 0 132 1;
#X connect 131 0 125 2;
#X connect 132 0 133 0;
#X connect 133 0 131 0;
#X connect 134 0 135 0;
#X connect 134 1 136 0;
#X connect 135 0 138 0;
#X connect 136 0 137 0;
#X connect 138 0 142 1;
#X connect 139 0 138 0;
#X connect 140 0 141 0;
#X connect 141 0 142 0;
#X connect 142 0 143 0;
#X connect 143 0 145 0;
#X connect 143 1 144 0;
#X connect 144 0 125 0;
#X connect 152 0 158 0;
#X connect 153 0 154 0;
#X connect 153 0 155 0;
#X connect 155 0 157 0;
#X connect 159 0 160 0;
#X connect 160 0 163 0;
#X connect 161 0 163 0;
#X connect 162 0 161 0;
#X connect 163 0 164 0;
#X connect 164 0 165 0;
#X connect 165 0 125 2;
#X connect 165 1 166 0;
#X connect 165 1 125 3;
#X connect 166 0 167 0;
#X connect 166 0 173 0;
#X connect 167 0 168 0;
#X connect 167 0 172 0;
#X connect 169 0 170 0;
#X connect 170 0 171 0;
#X connect 171 0 165 1;
#X connect 173 0 145 0;
#X connect 174 0 218 0;
#X connect 179 0 194 0;
#X connect 179 0 198 0;
#X connect 180 0 195 0;
#X connect 180 0 199 0;
#X connect 181 0 200 0;
#X connect 182 0 201 0;
#X connect 183 0 204 0;
#X connect 184 0 202 0;
#X connect 185 0 205 0;
#X connect 186 0 203 0;
#X connect 186 0 243 0;
#X connect 188 0 189 0;
#X connect 189 0 179 0;
#X connect 189 0 180 0;
#X connect 190 0 181 0;
#X connect 190 0 182 0;
#X connect 190 0 183 0;
#X connect 190 0 184 0;
#X connect 190 0 185 0;
#X connect 190 0 186 0;
#X connect 191 1 184 1;
#X connect 192 1 185 1;
#X connect 193 0 186 1;
#X connect 198 0 196 0;
#X connect 199 0 197 0;
#X connect 206 0 208 0;
#X connect 207 0 208 0;
#X connect 208 0 209 0;
#X connect 209 0 210 0;
#X connect 209 1 213 0;
#X connect 209 2 211 0;
#X connect 210 0 211 1;
#X connect 211 0 212 0;
#X connect 212 0 220 0;
#X connect 213 0 214 0;
#X connect 214 1 212 0;
#X connect 215 0 216 0;
#X connect 216 0 212 1;
#X connect 217 0 216 1;
#X connect 218 0 170 0;
#X connect 218 1 169 0;
#X connect 219 0 216 1;
#X connect 220 0 221 0;
#X connect 220 0 226 0;
#X connect 220 0 237 1;
#X connect 220 0 249 0;
#X connect 220 2 230 0;
#X connect 222 0 223 0;
#X connect 223 0 220 4;
#X connect 224 0 225 0;
#X connect 225 0 220 0;
#X connect 226 0 227 0;
#X connect 230 0 210 0;
#X connect 231 0 138 1;
#X connect 235 0 236 0;
#X connect 236 0 237 0;
#X connect 237 0 238 0;
#X connect 238 0 241 0;
#X connect 239 0 240 0;
#X connect 240 0 238 1;
#X connect 240 0 246 0;
#X connect 243 0 244 0;
#X connect 246 0 247 0;
#X connect 247 0 248 0;
#X connect 248 0 249 0;
#X connect 249 0 250 0;
#X connect 250 0 251 0;
#X connect 251 0 257 0;
#X connect 252 0 253 0;
#X connect 253 0 251 0;
#X connect 254 0 255 0;
#X connect 256 0 251 1;
#X connect 257 0 258 0;
#X connect 263 0 264 0;
#X connect 264 0 278 0;
#X connect 265 0 266 0;
#X connect 266 0 267 0;
#X connect 267 0 268 0;
#X connect 269 0 100 0;
#X connect 270 0 272 0;
#X connect 271 0 272 0;
#X connect 272 0 267 0;
#X connect 273 0 274 0;
#X connect 274 0 265 1;
#X connect 276 0 265 2;
#X connect 277 0 276 1;
#X connect 278 0 282 1;
#X connect 278 1 276 0;
#X connect 278 1 281 1;
#X connect 280 0 281 0;
#X connect 281 0 282 0;
#X connect 282 0 265 0;
#X connect 284 0 285 0;
#X connect 285 0 287 0;
#X connect 286 0 285 1;
#X connect 287 0 289 0;
#X connect 288 0 289 0;
#X connect 289 0 292 1;
#X connect 290 0 288 0;
#X connect 291 0 290 0;
#X connect 292 0 294 1;
#X connect 292 0 311 0;
#X connect 293 0 292 0;
#X connect 294 0 302 0;
#X connect 294 0 303 0;
#X connect 295 0 294 0;
#X connect 296 0 295 0;
#X connect 297 0 295 0;
#X connect 298 0 297 0;
#X connect 299 0 300 0;
#X connect 300 0 301 0;
#X connect 301 0 296 0;
#X connect 303 0 304 0;
#X connect 304 0 305 0;
#X connect 306 0 312 0;
#X connect 306 0 322 0;
#X connect 307 0 308 0;
#X connect 308 0 309 0;
#X connect 309 0 310 0;
#X connect 310 0 304 0;
#X connect 311 0 310 0;
#X connect 312 0 310 1;
#X connect 313 0 314 0;
#X connect 314 0 312 1;
#X connect 315 0 304 0;
#X connect 316 0 324 1;
#X connect 317 0 316 0;
#X connect 318 0 317 0;
#X connect 319 0 321 0;
#X connect 320 0 319 0;
#X connect 320 0 304 0;
#X connect 322 0 316 1;
#X connect 323 0 324 0;
#X connect 324 0 305 0;
#X connect 325 0 305 0;
#X connect 330 0 332 0;
#X connect 330 0 346 0;
#X connect 332 0 333 0;
#X connect 333 0 334 0;
#X connect 334 0 335 0;
#X connect 335 0 347 0;
#X connect 335 0 337 0;
#X connect 335 1 336 0;
#X connect 335 1 342 0;
#X connect 337 0 338 0;
#X connect 337 0 339 0;
#X connect 338 0 339 0;
#X connect 340 0 341 0;
#X connect 341 0 338 0;
#X connect 341 0 342 0;
#X connect 342 0 343 0;
#X connect 343 0 344 0;
#X connect 346 0 331 0;
#X connect 347 0 331 0;
